{"name":"Led Cube Project","tagline":"","body":"## 8x8x8 LED Cube Project\r\n\r\n![Cover Image](https://2zqp8w-bn1305.files.1drv.com/y3m0Dv7Xa0R_Emk-VhlvV3d_oqgr06IRckKShxmcvy-5cK9KZv2-AtmFuGf40tb-o4o5vUDHKkVBho87KozqJ5Eh3sWjWsyhAte0i68YKBQnsID2_w5OuTVMTFLePjAUKcqhzOB9P1b89nKejfLc39lM_O51MCEBoFoNfoX_PnJStI?width=1024&height=680&cropmode=none)\r\n*The finished Cube hooked up to a programmer and oscilliscope*\r\n\r\nOver the last year and a half, I designed, constructed and programmed an 8x8x8 LED Cube. This page serves as a complete description of my design and how I was able to make it all work. The goal of this page is to provide enough information so that a beginner in hardware and software could build their own cube. \r\n\r\nIf you're interested in seeing more images before reading on, take a look at the [gallery](http://1drv.ms/1XGtxvg).\r\n\r\nReady to get started? Read on!\r\n\r\n***\r\n## Materials\r\n* 512 x 5mm diffused LEDs (Any color) \r\n* 4 x TLC59116 Constant current sink LED drivers \r\n* 1 x PIC18LF45K22 MCU\r\n* 8 x 2n4401 NPN type transistors\r\n* 8 x FQD11P06 P-Channel MOSFETs\r\n* 1 x LM350 voltage regulator\r\n* Breadboards to put it on\r\n\r\n***\r\n## High Level Design\r\n\r\n![Cube Schematic](https://bvtfsq-bn1305.files.1drv.com/y3m6SXNtfDGpxcCuLSCWiu8hR_I4eLB3B9x1GpAqS_q12BVjnfx0_Eifj3n6QOH6j0N9ueSNTJjgWB1yYSUjNJxoEjOnsKKaPv7G_-c3hylnCgbuiOhDJ8sBi0RppzKhmETSgaQ-krd7_TtyVTTcRfcvbRTdBcbGInjcUXmhMpJcNQ?width=1024&height=662&cropmode=none)\r\n*Schematic of the cube (Power lines not shown)*\r\n\r\nThe overall design is works be performing a raster scan from the top down on a 3D array of LEDs. The array is designed such that each of 8 8x8 layers are addressed one at a time. 4 constant current display drivers capable of addressing 16 LEDs each. A PIC MCU is used to coordinate the refresh cycles by writing to the drivers appropriately. Finally, a Raspberry Pi is used as an interface and frame rendering system that is capable of communicating frames to the PIC.\r\n\r\n### 512 LED Array\r\nThe whole array is broken into 8 layers of 64 LEDs Each. The cathodes of all the LEDs in a layer are soldered together allowing the whole layer to be powered at one time. The anodes of the LEDs form the columns of the array. Each layer then has 1 power input, and 64 addressable columns, allowing the driver to address 64 columns with the 4 display drivers.\r\n\r\n### Display Drivers\r\n4 Texas Instruments TLC59116 16-bit I2C LED Sink Drivers are used to address a layer of 8x8 (64) LEDs. These drivers can read in data for one layer of LEDs and latch the output so that the layer can be displayed.\r\n\r\n### Display controller\r\nThe display controller was a PIC18LF45K22 PIC Microcontroller programmed with a Mikro Electronika EasyProg. The driver was written in embedded C to act as a double buffered system capable of accepting asynchronous input through UART connection with a master controller while keeping the display refreshed.\r\n\r\n### Raspberry Pi\r\nTo give the cube the capability of almost anything, I used a Raspberry Pi as a master controller for the system. I run simple Raspian Linux on the Pi, and have developed a software API in Mono C# that abstracts away the underlying hardware interface and provides end users to easy address LEDs in a simple (x, y, z) format. The end result is a top level system that is capable of eveytrhing from simple animations to accepting network input and more!\r\n\r\n***\r\n## Construction\r\n### LED Array\r\n### Display Drivers\r\n### Layer Switches\r\n### Power Supply\r\n### Putting it together\r\n\r\n***\r\n## Software\r\n### Display Controller\r\n### Raspberry Pi\r\n\r\n***\r\n## Authors and Contributors\r\nMichael Davies\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}